// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: apptest/user_svc.g.proto

package apptest

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserAddRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          []byte                 `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Tenant      *TenantRef             `protobuf:"bytes,2,opt,name=tenant"`
	xxx_hidden_Alias       *string                `protobuf:"bytes,4,opt,name=alias"`
	xxx_hidden_Name        *string                `protobuf:"bytes,5,opt,name=name"`
	xxx_hidden_Labels      map[string]string      `protobuf:"bytes,7,rep,name=labels" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_DateCreated *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=date_created,json=dateCreated"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UserAddRequest) Reset() {
	*x = UserAddRequest{}
	mi := &file_apptest_user_svc_g_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAddRequest) ProtoMessage() {}

func (x *UserAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apptest_user_svc_g_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UserAddRequest) GetId() []byte {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *UserAddRequest) GetTenant() *TenantRef {
	if x != nil {
		return x.xxx_hidden_Tenant
	}
	return nil
}

func (x *UserAddRequest) GetAlias() string {
	if x != nil {
		if x.xxx_hidden_Alias != nil {
			return *x.xxx_hidden_Alias
		}
		return ""
	}
	return ""
}

func (x *UserAddRequest) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *UserAddRequest) GetLabels() map[string]string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *UserAddRequest) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_DateCreated
	}
	return nil
}

func (x *UserAddRequest) SetId(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *UserAddRequest) SetTenant(v *TenantRef) {
	x.xxx_hidden_Tenant = v
}

func (x *UserAddRequest) SetAlias(v string) {
	x.xxx_hidden_Alias = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *UserAddRequest) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *UserAddRequest) SetLabels(v map[string]string) {
	x.xxx_hidden_Labels = v
}

func (x *UserAddRequest) SetDateCreated(v *timestamppb.Timestamp) {
	x.xxx_hidden_DateCreated = v
}

func (x *UserAddRequest) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UserAddRequest) HasTenant() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Tenant != nil
}

func (x *UserAddRequest) HasAlias() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *UserAddRequest) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *UserAddRequest) HasDateCreated() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DateCreated != nil
}

func (x *UserAddRequest) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *UserAddRequest) ClearTenant() {
	x.xxx_hidden_Tenant = nil
}

func (x *UserAddRequest) ClearAlias() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Alias = nil
}

func (x *UserAddRequest) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Name = nil
}

func (x *UserAddRequest) ClearDateCreated() {
	x.xxx_hidden_DateCreated = nil
}

type UserAddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id          []byte
	Tenant      *TenantRef
	Alias       *string
	Name        *string
	Labels      map[string]string
	DateCreated *timestamppb.Timestamp
}

func (b0 UserAddRequest_builder) Build() *UserAddRequest {
	m0 := &UserAddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Id = b.Id
	}
	x.xxx_hidden_Tenant = b.Tenant
	if b.Alias != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_Alias = b.Alias
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_Labels = b.Labels
	x.xxx_hidden_DateCreated = b.DateCreated
	return m0
}

type UserRefByAlias struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Alias       *string                `protobuf:"bytes,4,opt,name=alias"`
	xxx_hidden_Tenant      *TenantRef             `protobuf:"bytes,2,opt,name=tenant"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UserRefByAlias) Reset() {
	*x = UserRefByAlias{}
	mi := &file_apptest_user_svc_g_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRefByAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRefByAlias) ProtoMessage() {}

func (x *UserRefByAlias) ProtoReflect() protoreflect.Message {
	mi := &file_apptest_user_svc_g_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UserRefByAlias) GetAlias() string {
	if x != nil {
		if x.xxx_hidden_Alias != nil {
			return *x.xxx_hidden_Alias
		}
		return ""
	}
	return ""
}

func (x *UserRefByAlias) GetTenant() *TenantRef {
	if x != nil {
		return x.xxx_hidden_Tenant
	}
	return nil
}

func (x *UserRefByAlias) SetAlias(v string) {
	x.xxx_hidden_Alias = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *UserRefByAlias) SetTenant(v *TenantRef) {
	x.xxx_hidden_Tenant = v
}

func (x *UserRefByAlias) HasAlias() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UserRefByAlias) HasTenant() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Tenant != nil
}

func (x *UserRefByAlias) ClearAlias() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Alias = nil
}

func (x *UserRefByAlias) ClearTenant() {
	x.xxx_hidden_Tenant = nil
}

type UserRefByAlias_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Alias  *string
	Tenant *TenantRef
}

func (b0 UserRefByAlias_builder) Build() *UserRefByAlias {
	m0 := &UserRefByAlias{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Alias != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Alias = b.Alias
	}
	x.xxx_hidden_Tenant = b.Tenant
	return m0
}

type UserRef struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key isUserRef_Key          `protobuf_oneof:"key"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserRef) Reset() {
	*x = UserRef{}
	mi := &file_apptest_user_svc_g_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRef) ProtoMessage() {}

func (x *UserRef) ProtoReflect() protoreflect.Message {
	mi := &file_apptest_user_svc_g_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UserRef) GetId() []byte {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*userRef_Id); ok {
			return x.Id
		}
	}
	return nil
}

func (x *UserRef) GetAlias() *UserRefByAlias {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*userRef_Alias); ok {
			return x.Alias
		}
	}
	return nil
}

func (x *UserRef) SetId(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Key = &userRef_Id{v}
}

func (x *UserRef) SetAlias(v *UserRefByAlias) {
	if v == nil {
		x.xxx_hidden_Key = nil
		return
	}
	x.xxx_hidden_Key = &userRef_Alias{v}
}

func (x *UserRef) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *UserRef) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*userRef_Id)
	return ok
}

func (x *UserRef) HasAlias() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*userRef_Alias)
	return ok
}

func (x *UserRef) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *UserRef) ClearId() {
	if _, ok := x.xxx_hidden_Key.(*userRef_Id); ok {
		x.xxx_hidden_Key = nil
	}
}

func (x *UserRef) ClearAlias() {
	if _, ok := x.xxx_hidden_Key.(*userRef_Alias); ok {
		x.xxx_hidden_Key = nil
	}
}

const UserRef_Key_not_set_case case_UserRef_Key = 0
const UserRef_Id_case case_UserRef_Key = 1
const UserRef_Alias_case case_UserRef_Key = 4

func (x *UserRef) WhichKey() case_UserRef_Key {
	if x == nil {
		return UserRef_Key_not_set_case
	}
	switch x.xxx_hidden_Key.(type) {
	case *userRef_Id:
		return UserRef_Id_case
	case *userRef_Alias:
		return UserRef_Alias_case
	default:
		return UserRef_Key_not_set_case
	}
}

type UserRef_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Key:
	Id    []byte
	Alias *UserRefByAlias
	// -- end of xxx_hidden_Key
}

func (b0 UserRef_builder) Build() *UserRef {
	m0 := &UserRef{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Key = &userRef_Id{b.Id}
	}
	if b.Alias != nil {
		x.xxx_hidden_Key = &userRef_Alias{b.Alias}
	}
	return m0
}

type case_UserRef_Key protoreflect.FieldNumber

func (x case_UserRef_Key) String() string {
	md := file_apptest_user_svc_g_proto_msgTypes[2].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isUserRef_Key interface {
	isUserRef_Key()
}

type userRef_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,oneof"`
}

type userRef_Alias struct {
	Alias *UserRefByAlias `protobuf:"bytes,4,opt,name=alias,oneof"`
}

func (*userRef_Id) isUserRef_Key() {}

func (*userRef_Alias) isUserRef_Key() {}

type UserSelect struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_All         bool                   `protobuf:"varint,1,opt,name=all"`
	xxx_hidden_Tenant      *TenantSelect          `protobuf:"bytes,2,opt,name=tenant"`
	xxx_hidden_Alias       bool                   `protobuf:"varint,4,opt,name=alias"`
	xxx_hidden_Name        bool                   `protobuf:"varint,5,opt,name=name"`
	xxx_hidden_Labels      bool                   `protobuf:"varint,7,opt,name=labels"`
	xxx_hidden_DateCreated bool                   `protobuf:"varint,15,opt,name=date_created,json=dateCreated"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UserSelect) Reset() {
	*x = UserSelect{}
	mi := &file_apptest_user_svc_g_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSelect) ProtoMessage() {}

func (x *UserSelect) ProtoReflect() protoreflect.Message {
	mi := &file_apptest_user_svc_g_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UserSelect) GetAll() bool {
	if x != nil {
		return x.xxx_hidden_All
	}
	return false
}

func (x *UserSelect) GetTenant() *TenantSelect {
	if x != nil {
		return x.xxx_hidden_Tenant
	}
	return nil
}

func (x *UserSelect) GetAlias() bool {
	if x != nil {
		return x.xxx_hidden_Alias
	}
	return false
}

func (x *UserSelect) GetName() bool {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return false
}

func (x *UserSelect) GetLabels() bool {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return false
}

func (x *UserSelect) GetDateCreated() bool {
	if x != nil {
		return x.xxx_hidden_DateCreated
	}
	return false
}

func (x *UserSelect) SetAll(v bool) {
	x.xxx_hidden_All = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *UserSelect) SetTenant(v *TenantSelect) {
	x.xxx_hidden_Tenant = v
}

func (x *UserSelect) SetAlias(v bool) {
	x.xxx_hidden_Alias = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *UserSelect) SetName(v bool) {
	x.xxx_hidden_Name = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *UserSelect) SetLabels(v bool) {
	x.xxx_hidden_Labels = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *UserSelect) SetDateCreated(v bool) {
	x.xxx_hidden_DateCreated = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *UserSelect) HasAll() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UserSelect) HasTenant() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Tenant != nil
}

func (x *UserSelect) HasAlias() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *UserSelect) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *UserSelect) HasLabels() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *UserSelect) HasDateCreated() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *UserSelect) ClearAll() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_All = false
}

func (x *UserSelect) ClearTenant() {
	x.xxx_hidden_Tenant = nil
}

func (x *UserSelect) ClearAlias() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Alias = false
}

func (x *UserSelect) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Name = false
}

func (x *UserSelect) ClearLabels() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Labels = false
}

func (x *UserSelect) ClearDateCreated() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_DateCreated = false
}

type UserSelect_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	All         *bool
	Tenant      *TenantSelect
	Alias       *bool
	Name        *bool
	Labels      *bool
	DateCreated *bool
}

func (b0 UserSelect_builder) Build() *UserSelect {
	m0 := &UserSelect{}
	b, x := &b0, m0
	_, _ = b, x
	if b.All != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_All = *b.All
	}
	x.xxx_hidden_Tenant = b.Tenant
	if b.Alias != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_Alias = *b.Alias
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_Name = *b.Name
	}
	if b.Labels != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_Labels = *b.Labels
	}
	if b.DateCreated != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_DateCreated = *b.DateCreated
	}
	return m0
}

type UserGetRequest struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Ref    *UserRef               `protobuf:"bytes,1,opt,name=ref"`
	xxx_hidden_Select *UserSelect            `protobuf:"bytes,2,opt,name=select"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UserGetRequest) Reset() {
	*x = UserGetRequest{}
	mi := &file_apptest_user_svc_g_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGetRequest) ProtoMessage() {}

func (x *UserGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apptest_user_svc_g_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UserGetRequest) GetRef() *UserRef {
	if x != nil {
		return x.xxx_hidden_Ref
	}
	return nil
}

func (x *UserGetRequest) GetSelect() *UserSelect {
	if x != nil {
		return x.xxx_hidden_Select
	}
	return nil
}

func (x *UserGetRequest) SetRef(v *UserRef) {
	x.xxx_hidden_Ref = v
}

func (x *UserGetRequest) SetSelect(v *UserSelect) {
	x.xxx_hidden_Select = v
}

func (x *UserGetRequest) HasRef() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Ref != nil
}

func (x *UserGetRequest) HasSelect() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Select != nil
}

func (x *UserGetRequest) ClearRef() {
	x.xxx_hidden_Ref = nil
}

func (x *UserGetRequest) ClearSelect() {
	x.xxx_hidden_Select = nil
}

type UserGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Ref    *UserRef
	Select *UserSelect
}

func (b0 UserGetRequest_builder) Build() *UserGetRequest {
	m0 := &UserGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Ref = b.Ref
	x.xxx_hidden_Select = b.Select
	return m0
}

type UserPatchRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Target      *UserRef               `protobuf:"bytes,1,opt,name=target"`
	xxx_hidden_Tenant      *TenantRef             `protobuf:"bytes,3,opt,name=tenant"`
	xxx_hidden_Alias       *string                `protobuf:"bytes,7,opt,name=alias"`
	xxx_hidden_Name        *string                `protobuf:"bytes,9,opt,name=name"`
	xxx_hidden_Labels      map[string]string      `protobuf:"bytes,13,rep,name=labels" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UserPatchRequest) Reset() {
	*x = UserPatchRequest{}
	mi := &file_apptest_user_svc_g_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPatchRequest) ProtoMessage() {}

func (x *UserPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apptest_user_svc_g_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UserPatchRequest) GetTarget() *UserRef {
	if x != nil {
		return x.xxx_hidden_Target
	}
	return nil
}

func (x *UserPatchRequest) GetTenant() *TenantRef {
	if x != nil {
		return x.xxx_hidden_Tenant
	}
	return nil
}

func (x *UserPatchRequest) GetAlias() string {
	if x != nil {
		if x.xxx_hidden_Alias != nil {
			return *x.xxx_hidden_Alias
		}
		return ""
	}
	return ""
}

func (x *UserPatchRequest) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *UserPatchRequest) GetLabels() map[string]string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *UserPatchRequest) SetTarget(v *UserRef) {
	x.xxx_hidden_Target = v
}

func (x *UserPatchRequest) SetTenant(v *TenantRef) {
	x.xxx_hidden_Tenant = v
}

func (x *UserPatchRequest) SetAlias(v string) {
	x.xxx_hidden_Alias = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *UserPatchRequest) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *UserPatchRequest) SetLabels(v map[string]string) {
	x.xxx_hidden_Labels = v
}

func (x *UserPatchRequest) HasTarget() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Target != nil
}

func (x *UserPatchRequest) HasTenant() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Tenant != nil
}

func (x *UserPatchRequest) HasAlias() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *UserPatchRequest) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *UserPatchRequest) ClearTarget() {
	x.xxx_hidden_Target = nil
}

func (x *UserPatchRequest) ClearTenant() {
	x.xxx_hidden_Tenant = nil
}

func (x *UserPatchRequest) ClearAlias() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Alias = nil
}

func (x *UserPatchRequest) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Name = nil
}

type UserPatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Target *UserRef
	Tenant *TenantRef
	Alias  *string
	Name   *string
	Labels map[string]string
}

func (b0 UserPatchRequest_builder) Build() *UserPatchRequest {
	m0 := &UserPatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Target = b.Target
	x.xxx_hidden_Tenant = b.Tenant
	if b.Alias != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Alias = b.Alias
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_Labels = b.Labels
	return m0
}

var File_apptest_user_svc_g_proto protoreflect.FileDescriptor

const file_apptest_user_svc_g_proto_rawDesc = "" +
	"\n" +
	"\x18apptest/user_svc.g.proto\x12\aapptest\x1a\x1aapptest/tenant_svc.g.proto\x1a\x12apptest/user.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xbb\x02\n" +
	"\x0eUserAddRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12*\n" +
	"\x06tenant\x18\x02 \x01(\v2\x12.apptest.TenantRefR\x06tenant\x12\x1b\n" +
	"\x05alias\x18\x04 \x01(\tB\x05\xaa\x01\x02\b\x01R\x05alias\x12\x19\n" +
	"\x04name\x18\x05 \x01(\tB\x05\xaa\x01\x02\b\x01R\x04name\x12;\n" +
	"\x06labels\x18\a \x03(\v2#.apptest.UserAddRequest.LabelsEntryR\x06labels\x12=\n" +
	"\fdate_created\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampR\vdateCreated\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"R\n" +
	"\x0eUserRefByAlias\x12\x14\n" +
	"\x05alias\x18\x04 \x01(\tR\x05alias\x12*\n" +
	"\x06tenant\x18\x02 \x01(\v2\x12.apptest.TenantRefR\x06tenant\"S\n" +
	"\aUserRef\x12\x10\n" +
	"\x02id\x18\x01 \x01(\fH\x00R\x02id\x12/\n" +
	"\x05alias\x18\x04 \x01(\v2\x17.apptest.UserRefByAliasH\x00R\x05aliasB\x05\n" +
	"\x03key\"\xb2\x01\n" +
	"\n" +
	"UserSelect\x12\x10\n" +
	"\x03all\x18\x01 \x01(\bR\x03all\x12-\n" +
	"\x06tenant\x18\x02 \x01(\v2\x15.apptest.TenantSelectR\x06tenant\x12\x14\n" +
	"\x05alias\x18\x04 \x01(\bR\x05alias\x12\x12\n" +
	"\x04name\x18\x05 \x01(\bR\x04name\x12\x16\n" +
	"\x06labels\x18\a \x01(\bR\x06labels\x12!\n" +
	"\fdate_created\x18\x0f \x01(\bR\vdateCreated\"a\n" +
	"\x0eUserGetRequest\x12\"\n" +
	"\x03ref\x18\x01 \x01(\v2\x10.apptest.UserRefR\x03ref\x12+\n" +
	"\x06select\x18\x02 \x01(\v2\x13.apptest.UserSelectR\x06select\"\x8c\x02\n" +
	"\x10UserPatchRequest\x12(\n" +
	"\x06target\x18\x01 \x01(\v2\x10.apptest.UserRefR\x06target\x12*\n" +
	"\x06tenant\x18\x03 \x01(\v2\x12.apptest.TenantRefR\x06tenant\x12\x14\n" +
	"\x05alias\x18\a \x01(\tR\x05alias\x12\x12\n" +
	"\x04name\x18\t \x01(\tR\x04name\x12=\n" +
	"\x06labels\x18\r \x03(\v2%.apptest.UserPatchRequest.LabelsEntryR\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\xd1\x01\n" +
	"\vUserService\x12-\n" +
	"\x03Add\x12\x17.apptest.UserAddRequest\x1a\r.apptest.User\x12-\n" +
	"\x03Get\x12\x17.apptest.UserGetRequest\x1a\r.apptest.User\x121\n" +
	"\x05Patch\x12\x19.apptest.UserPatchRequest\x1a\r.apptest.User\x121\n" +
	"\x05Erase\x12\x10.apptest.UserRef\x1a\x16.google.protobuf.EmptyB<Z:github.com/protobuf-orm/protoc-gen-orm-go/internal/apptestb\beditionsp\xe8\a"

var file_apptest_user_svc_g_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_apptest_user_svc_g_proto_goTypes = []any{
	(*UserAddRequest)(nil),        // 0: apptest.UserAddRequest
	(*UserRefByAlias)(nil),        // 1: apptest.UserRefByAlias
	(*UserRef)(nil),               // 2: apptest.UserRef
	(*UserSelect)(nil),            // 3: apptest.UserSelect
	(*UserGetRequest)(nil),        // 4: apptest.UserGetRequest
	(*UserPatchRequest)(nil),      // 5: apptest.UserPatchRequest
	nil,                           // 6: apptest.UserAddRequest.LabelsEntry
	nil,                           // 7: apptest.UserPatchRequest.LabelsEntry
	(*TenantRef)(nil),             // 8: apptest.TenantRef
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
	(*TenantSelect)(nil),          // 10: apptest.TenantSelect
	(*User)(nil),                  // 11: apptest.User
	(*emptypb.Empty)(nil),         // 12: google.protobuf.Empty
}
var file_apptest_user_svc_g_proto_depIdxs = []int32{
	8,  // 0: apptest.UserAddRequest.tenant:type_name -> apptest.TenantRef
	6,  // 1: apptest.UserAddRequest.labels:type_name -> apptest.UserAddRequest.LabelsEntry
	9,  // 2: apptest.UserAddRequest.date_created:type_name -> google.protobuf.Timestamp
	8,  // 3: apptest.UserRefByAlias.tenant:type_name -> apptest.TenantRef
	1,  // 4: apptest.UserRef.alias:type_name -> apptest.UserRefByAlias
	10, // 5: apptest.UserSelect.tenant:type_name -> apptest.TenantSelect
	2,  // 6: apptest.UserGetRequest.ref:type_name -> apptest.UserRef
	3,  // 7: apptest.UserGetRequest.select:type_name -> apptest.UserSelect
	2,  // 8: apptest.UserPatchRequest.target:type_name -> apptest.UserRef
	8,  // 9: apptest.UserPatchRequest.tenant:type_name -> apptest.TenantRef
	7,  // 10: apptest.UserPatchRequest.labels:type_name -> apptest.UserPatchRequest.LabelsEntry
	0,  // 11: apptest.UserService.Add:input_type -> apptest.UserAddRequest
	4,  // 12: apptest.UserService.Get:input_type -> apptest.UserGetRequest
	5,  // 13: apptest.UserService.Patch:input_type -> apptest.UserPatchRequest
	2,  // 14: apptest.UserService.Erase:input_type -> apptest.UserRef
	11, // 15: apptest.UserService.Add:output_type -> apptest.User
	11, // 16: apptest.UserService.Get:output_type -> apptest.User
	11, // 17: apptest.UserService.Patch:output_type -> apptest.User
	12, // 18: apptest.UserService.Erase:output_type -> google.protobuf.Empty
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_apptest_user_svc_g_proto_init() }
func file_apptest_user_svc_g_proto_init() {
	if File_apptest_user_svc_g_proto != nil {
		return
	}
	file_apptest_tenant_svc_g_proto_init()
	file_apptest_user_proto_init()
	file_apptest_user_svc_g_proto_msgTypes[2].OneofWrappers = []any{
		(*userRef_Id)(nil),
		(*userRef_Alias)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_apptest_user_svc_g_proto_rawDesc), len(file_apptest_user_svc_g_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apptest_user_svc_g_proto_goTypes,
		DependencyIndexes: file_apptest_user_svc_g_proto_depIdxs,
		MessageInfos:      file_apptest_user_svc_g_proto_msgTypes,
	}.Build()
	File_apptest_user_svc_g_proto = out.File
	file_apptest_user_svc_g_proto_goTypes = nil
	file_apptest_user_svc_g_proto_depIdxs = nil
}
