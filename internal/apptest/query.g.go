// Code generated by protoc-gen-orm-go. DO NOT EDIT.

package apptest

import (
	bytes "bytes"
)

func (x *Tenant) Pick() *TenantRef {
	if v := x.GetId(); len(v) > 0 {
		return TenantById(v)
	}

	return nil
}

func (x *Tenant) PickUp() *TenantGetRequest {
	if p := x.Pick(); p != nil {
		return TenantGetRequest_builder{Ref: p}.Build()
	}
	return nil
}

func (x *TenantRef) Picks(v *Tenant) bool {
	switch x.WhichKey() {
	case TenantRef_Id_case:
		return bytes.Equal(x.GetId(), v.GetId())
	default:
		return false
	}
}

func TenantById(v []byte) *TenantRef {
	x := &TenantRef{}
	x.SetId(v)
	return x
}

func TenantGetById(v []byte) *TenantGetRequest {
	return TenantGetRequest_builder{Ref: TenantById(v)}.Build()
}

func (x *User) Pick() *UserRef {
	if v := x.GetId(); len(v) > 0 {
		return UserById(v)
	}
	{
		v1 := x.GetAlias()
		v2 := x.GetTenant()
		if len(v1) > 0 && v2 != nil {
			return UserByAlias(v1, v2.Pick())
		}
	}

	return nil
}

func (x *User) PickUp() *UserGetRequest {
	if p := x.Pick(); p != nil {
		return UserGetRequest_builder{Ref: p}.Build()
	}
	return nil
}

func (x *UserRef) Picks(v *User) bool {
	switch x.WhichKey() {
	case UserRef_Id_case:
		return bytes.Equal(x.GetId(), v.GetId())
	case UserRef_Alias_case:
		x := x.GetAlias()
		return (x.GetAlias() == v.GetAlias()) &&
			(x.GetTenant().Picks(v.GetTenant()))
	default:
		return false
	}
}

func UserById(v []byte) *UserRef {
	x := &UserRef{}
	x.SetId(v)
	return x
}

func UserGetById(v []byte) *UserGetRequest {
	return UserGetRequest_builder{Ref: UserById(v)}.Build()
}

func UserByAlias(alias string, tenant *TenantRef) *UserRef {
	x := &UserRefByAlias{}
	x.SetAlias(alias)
	x.SetTenant(tenant)
	return UserRef_builder{Alias: x}.Build()
}

func UserGetByAlias(alias string, tenant *TenantRef) *UserGetRequest {
	return UserGetRequest_builder{Ref: UserByAlias(alias, tenant)}.Build()
}
