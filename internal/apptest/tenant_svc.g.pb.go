// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: apptest/tenant_svc.g.proto

package apptest

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TenantAddRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          []byte                 `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Alias       *string                `protobuf:"bytes,4,opt,name=alias"`
	xxx_hidden_Name        *string                `protobuf:"bytes,5,opt,name=name"`
	xxx_hidden_Labels      map[string]string      `protobuf:"bytes,7,rep,name=labels" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_DateCreated *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=date_created,json=dateCreated"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TenantAddRequest) Reset() {
	*x = TenantAddRequest{}
	mi := &file_apptest_tenant_svc_g_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantAddRequest) ProtoMessage() {}

func (x *TenantAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apptest_tenant_svc_g_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TenantAddRequest) GetId() []byte {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *TenantAddRequest) GetAlias() string {
	if x != nil {
		if x.xxx_hidden_Alias != nil {
			return *x.xxx_hidden_Alias
		}
		return ""
	}
	return ""
}

func (x *TenantAddRequest) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *TenantAddRequest) GetLabels() map[string]string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *TenantAddRequest) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_DateCreated
	}
	return nil
}

func (x *TenantAddRequest) SetId(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *TenantAddRequest) SetAlias(v string) {
	x.xxx_hidden_Alias = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *TenantAddRequest) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *TenantAddRequest) SetLabels(v map[string]string) {
	x.xxx_hidden_Labels = v
}

func (x *TenantAddRequest) SetDateCreated(v *timestamppb.Timestamp) {
	x.xxx_hidden_DateCreated = v
}

func (x *TenantAddRequest) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TenantAddRequest) HasAlias() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TenantAddRequest) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TenantAddRequest) HasDateCreated() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DateCreated != nil
}

func (x *TenantAddRequest) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TenantAddRequest) ClearAlias() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Alias = nil
}

func (x *TenantAddRequest) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Name = nil
}

func (x *TenantAddRequest) ClearDateCreated() {
	x.xxx_hidden_DateCreated = nil
}

type TenantAddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id          []byte
	Alias       *string
	Name        *string
	Labels      map[string]string
	DateCreated *timestamppb.Timestamp
}

func (b0 TenantAddRequest_builder) Build() *TenantAddRequest {
	m0 := &TenantAddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Id = b.Id
	}
	if b.Alias != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Alias = b.Alias
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_Labels = b.Labels
	x.xxx_hidden_DateCreated = b.DateCreated
	return m0
}

type TenantRef struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key isTenantRef_Key        `protobuf_oneof:"key"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TenantRef) Reset() {
	*x = TenantRef{}
	mi := &file_apptest_tenant_svc_g_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantRef) ProtoMessage() {}

func (x *TenantRef) ProtoReflect() protoreflect.Message {
	mi := &file_apptest_tenant_svc_g_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TenantRef) GetId() []byte {
	if x != nil {
		if x, ok := x.xxx_hidden_Key.(*tenantRef_Id); ok {
			return x.Id
		}
	}
	return nil
}

func (x *TenantRef) SetId(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Key = &tenantRef_Id{v}
}

func (x *TenantRef) HasKey() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Key != nil
}

func (x *TenantRef) HasId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Key.(*tenantRef_Id)
	return ok
}

func (x *TenantRef) ClearKey() {
	x.xxx_hidden_Key = nil
}

func (x *TenantRef) ClearId() {
	if _, ok := x.xxx_hidden_Key.(*tenantRef_Id); ok {
		x.xxx_hidden_Key = nil
	}
}

const TenantRef_Key_not_set_case case_TenantRef_Key = 0
const TenantRef_Id_case case_TenantRef_Key = 1

func (x *TenantRef) WhichKey() case_TenantRef_Key {
	if x == nil {
		return TenantRef_Key_not_set_case
	}
	switch x.xxx_hidden_Key.(type) {
	case *tenantRef_Id:
		return TenantRef_Id_case
	default:
		return TenantRef_Key_not_set_case
	}
}

type TenantRef_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Key:
	Id []byte
	// -- end of xxx_hidden_Key
}

func (b0 TenantRef_builder) Build() *TenantRef {
	m0 := &TenantRef{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		x.xxx_hidden_Key = &tenantRef_Id{b.Id}
	}
	return m0
}

type case_TenantRef_Key protoreflect.FieldNumber

func (x case_TenantRef_Key) String() string {
	md := file_apptest_tenant_svc_g_proto_msgTypes[1].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTenantRef_Key interface {
	isTenantRef_Key()
}

type tenantRef_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,oneof"`
}

func (*tenantRef_Id) isTenantRef_Key() {}

type TenantSelect struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_All         bool                   `protobuf:"varint,1,opt,name=all"`
	xxx_hidden_Alias       bool                   `protobuf:"varint,4,opt,name=alias"`
	xxx_hidden_Name        bool                   `protobuf:"varint,5,opt,name=name"`
	xxx_hidden_Labels      bool                   `protobuf:"varint,7,opt,name=labels"`
	xxx_hidden_DateCreated bool                   `protobuf:"varint,15,opt,name=date_created,json=dateCreated"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TenantSelect) Reset() {
	*x = TenantSelect{}
	mi := &file_apptest_tenant_svc_g_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantSelect) ProtoMessage() {}

func (x *TenantSelect) ProtoReflect() protoreflect.Message {
	mi := &file_apptest_tenant_svc_g_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TenantSelect) GetAll() bool {
	if x != nil {
		return x.xxx_hidden_All
	}
	return false
}

func (x *TenantSelect) GetAlias() bool {
	if x != nil {
		return x.xxx_hidden_Alias
	}
	return false
}

func (x *TenantSelect) GetName() bool {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return false
}

func (x *TenantSelect) GetLabels() bool {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return false
}

func (x *TenantSelect) GetDateCreated() bool {
	if x != nil {
		return x.xxx_hidden_DateCreated
	}
	return false
}

func (x *TenantSelect) SetAll(v bool) {
	x.xxx_hidden_All = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *TenantSelect) SetAlias(v bool) {
	x.xxx_hidden_Alias = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *TenantSelect) SetName(v bool) {
	x.xxx_hidden_Name = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *TenantSelect) SetLabels(v bool) {
	x.xxx_hidden_Labels = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *TenantSelect) SetDateCreated(v bool) {
	x.xxx_hidden_DateCreated = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *TenantSelect) HasAll() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TenantSelect) HasAlias() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TenantSelect) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TenantSelect) HasLabels() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TenantSelect) HasDateCreated() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *TenantSelect) ClearAll() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_All = false
}

func (x *TenantSelect) ClearAlias() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Alias = false
}

func (x *TenantSelect) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Name = false
}

func (x *TenantSelect) ClearLabels() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Labels = false
}

func (x *TenantSelect) ClearDateCreated() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_DateCreated = false
}

type TenantSelect_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	All         *bool
	Alias       *bool
	Name        *bool
	Labels      *bool
	DateCreated *bool
}

func (b0 TenantSelect_builder) Build() *TenantSelect {
	m0 := &TenantSelect{}
	b, x := &b0, m0
	_, _ = b, x
	if b.All != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_All = *b.All
	}
	if b.Alias != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Alias = *b.Alias
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Name = *b.Name
	}
	if b.Labels != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Labels = *b.Labels
	}
	if b.DateCreated != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_DateCreated = *b.DateCreated
	}
	return m0
}

type TenantGetRequest struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Ref    *TenantRef             `protobuf:"bytes,1,opt,name=ref"`
	xxx_hidden_Select *TenantSelect          `protobuf:"bytes,2,opt,name=select"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TenantGetRequest) Reset() {
	*x = TenantGetRequest{}
	mi := &file_apptest_tenant_svc_g_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantGetRequest) ProtoMessage() {}

func (x *TenantGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apptest_tenant_svc_g_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TenantGetRequest) GetRef() *TenantRef {
	if x != nil {
		return x.xxx_hidden_Ref
	}
	return nil
}

func (x *TenantGetRequest) GetSelect() *TenantSelect {
	if x != nil {
		return x.xxx_hidden_Select
	}
	return nil
}

func (x *TenantGetRequest) SetRef(v *TenantRef) {
	x.xxx_hidden_Ref = v
}

func (x *TenantGetRequest) SetSelect(v *TenantSelect) {
	x.xxx_hidden_Select = v
}

func (x *TenantGetRequest) HasRef() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Ref != nil
}

func (x *TenantGetRequest) HasSelect() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Select != nil
}

func (x *TenantGetRequest) ClearRef() {
	x.xxx_hidden_Ref = nil
}

func (x *TenantGetRequest) ClearSelect() {
	x.xxx_hidden_Select = nil
}

type TenantGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Ref    *TenantRef
	Select *TenantSelect
}

func (b0 TenantGetRequest_builder) Build() *TenantGetRequest {
	m0 := &TenantGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Ref = b.Ref
	x.xxx_hidden_Select = b.Select
	return m0
}

type TenantPatchRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Target      *TenantRef             `protobuf:"bytes,1,opt,name=target"`
	xxx_hidden_Alias       *string                `protobuf:"bytes,7,opt,name=alias"`
	xxx_hidden_Name        *string                `protobuf:"bytes,9,opt,name=name"`
	xxx_hidden_Labels      map[string]string      `protobuf:"bytes,13,rep,name=labels" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TenantPatchRequest) Reset() {
	*x = TenantPatchRequest{}
	mi := &file_apptest_tenant_svc_g_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantPatchRequest) ProtoMessage() {}

func (x *TenantPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apptest_tenant_svc_g_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TenantPatchRequest) GetTarget() *TenantRef {
	if x != nil {
		return x.xxx_hidden_Target
	}
	return nil
}

func (x *TenantPatchRequest) GetAlias() string {
	if x != nil {
		if x.xxx_hidden_Alias != nil {
			return *x.xxx_hidden_Alias
		}
		return ""
	}
	return ""
}

func (x *TenantPatchRequest) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *TenantPatchRequest) GetLabels() map[string]string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *TenantPatchRequest) SetTarget(v *TenantRef) {
	x.xxx_hidden_Target = v
}

func (x *TenantPatchRequest) SetAlias(v string) {
	x.xxx_hidden_Alias = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *TenantPatchRequest) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *TenantPatchRequest) SetLabels(v map[string]string) {
	x.xxx_hidden_Labels = v
}

func (x *TenantPatchRequest) HasTarget() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Target != nil
}

func (x *TenantPatchRequest) HasAlias() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TenantPatchRequest) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TenantPatchRequest) ClearTarget() {
	x.xxx_hidden_Target = nil
}

func (x *TenantPatchRequest) ClearAlias() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Alias = nil
}

func (x *TenantPatchRequest) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Name = nil
}

type TenantPatchRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Target *TenantRef
	Alias  *string
	Name   *string
	Labels map[string]string
}

func (b0 TenantPatchRequest_builder) Build() *TenantPatchRequest {
	m0 := &TenantPatchRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Target = b.Target
	if b.Alias != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Alias = b.Alias
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_Labels = b.Labels
	return m0
}

var File_apptest_tenant_svc_g_proto protoreflect.FileDescriptor

const file_apptest_tenant_svc_g_proto_rawDesc = "" +
	"\n" +
	"\x1aapptest/tenant_svc.g.proto\x12\aapptest\x1a\x14apptest/tenant.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x85\x02\n" +
	"\x10TenantAddRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x14\n" +
	"\x05alias\x18\x04 \x01(\tR\x05alias\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12=\n" +
	"\x06labels\x18\a \x03(\v2%.apptest.TenantAddRequest.LabelsEntryR\x06labels\x12=\n" +
	"\fdate_created\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampR\vdateCreated\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"$\n" +
	"\tTenantRef\x12\x10\n" +
	"\x02id\x18\x01 \x01(\fH\x00R\x02idB\x05\n" +
	"\x03key\"\x85\x01\n" +
	"\fTenantSelect\x12\x10\n" +
	"\x03all\x18\x01 \x01(\bR\x03all\x12\x14\n" +
	"\x05alias\x18\x04 \x01(\bR\x05alias\x12\x12\n" +
	"\x04name\x18\x05 \x01(\bR\x04name\x12\x16\n" +
	"\x06labels\x18\a \x01(\bR\x06labels\x12!\n" +
	"\fdate_created\x18\x0f \x01(\bR\vdateCreated\"g\n" +
	"\x10TenantGetRequest\x12$\n" +
	"\x03ref\x18\x01 \x01(\v2\x12.apptest.TenantRefR\x03ref\x12-\n" +
	"\x06select\x18\x02 \x01(\v2\x15.apptest.TenantSelectR\x06select\"\xe6\x01\n" +
	"\x12TenantPatchRequest\x12*\n" +
	"\x06target\x18\x01 \x01(\v2\x12.apptest.TenantRefR\x06target\x12\x14\n" +
	"\x05alias\x18\a \x01(\tR\x05alias\x12\x12\n" +
	"\x04name\x18\t \x01(\tR\x04name\x12?\n" +
	"\x06labels\x18\r \x03(\v2'.apptest.TenantPatchRequest.LabelsEntryR\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\xe1\x01\n" +
	"\rTenantService\x121\n" +
	"\x03Add\x12\x19.apptest.TenantAddRequest\x1a\x0f.apptest.Tenant\x121\n" +
	"\x03Get\x12\x19.apptest.TenantGetRequest\x1a\x0f.apptest.Tenant\x125\n" +
	"\x05Patch\x12\x1b.apptest.TenantPatchRequest\x1a\x0f.apptest.Tenant\x123\n" +
	"\x05Erase\x12\x12.apptest.TenantRef\x1a\x16.google.protobuf.EmptyB<Z:github.com/protobuf-orm/protoc-gen-orm-go/internal/apptestb\beditionsp\xe8\a"

var file_apptest_tenant_svc_g_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_apptest_tenant_svc_g_proto_goTypes = []any{
	(*TenantAddRequest)(nil),      // 0: apptest.TenantAddRequest
	(*TenantRef)(nil),             // 1: apptest.TenantRef
	(*TenantSelect)(nil),          // 2: apptest.TenantSelect
	(*TenantGetRequest)(nil),      // 3: apptest.TenantGetRequest
	(*TenantPatchRequest)(nil),    // 4: apptest.TenantPatchRequest
	nil,                           // 5: apptest.TenantAddRequest.LabelsEntry
	nil,                           // 6: apptest.TenantPatchRequest.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*Tenant)(nil),                // 8: apptest.Tenant
	(*emptypb.Empty)(nil),         // 9: google.protobuf.Empty
}
var file_apptest_tenant_svc_g_proto_depIdxs = []int32{
	5,  // 0: apptest.TenantAddRequest.labels:type_name -> apptest.TenantAddRequest.LabelsEntry
	7,  // 1: apptest.TenantAddRequest.date_created:type_name -> google.protobuf.Timestamp
	1,  // 2: apptest.TenantGetRequest.ref:type_name -> apptest.TenantRef
	2,  // 3: apptest.TenantGetRequest.select:type_name -> apptest.TenantSelect
	1,  // 4: apptest.TenantPatchRequest.target:type_name -> apptest.TenantRef
	6,  // 5: apptest.TenantPatchRequest.labels:type_name -> apptest.TenantPatchRequest.LabelsEntry
	0,  // 6: apptest.TenantService.Add:input_type -> apptest.TenantAddRequest
	3,  // 7: apptest.TenantService.Get:input_type -> apptest.TenantGetRequest
	4,  // 8: apptest.TenantService.Patch:input_type -> apptest.TenantPatchRequest
	1,  // 9: apptest.TenantService.Erase:input_type -> apptest.TenantRef
	8,  // 10: apptest.TenantService.Add:output_type -> apptest.Tenant
	8,  // 11: apptest.TenantService.Get:output_type -> apptest.Tenant
	8,  // 12: apptest.TenantService.Patch:output_type -> apptest.Tenant
	9,  // 13: apptest.TenantService.Erase:output_type -> google.protobuf.Empty
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_apptest_tenant_svc_g_proto_init() }
func file_apptest_tenant_svc_g_proto_init() {
	if File_apptest_tenant_svc_g_proto != nil {
		return
	}
	file_apptest_tenant_proto_init()
	file_apptest_tenant_svc_g_proto_msgTypes[1].OneofWrappers = []any{
		(*tenantRef_Id)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_apptest_tenant_svc_g_proto_rawDesc), len(file_apptest_tenant_svc_g_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apptest_tenant_svc_g_proto_goTypes,
		DependencyIndexes: file_apptest_tenant_svc_g_proto_depIdxs,
		MessageInfos:      file_apptest_tenant_svc_g_proto_msgTypes,
	}.Build()
	File_apptest_tenant_svc_g_proto = out.File
	file_apptest_tenant_svc_g_proto_goTypes = nil
	file_apptest_tenant_svc_g_proto_depIdxs = nil
}
