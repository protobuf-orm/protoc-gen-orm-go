package app

import (
	"context"
	"path/filepath"

	"github.com/protobuf-orm/protobuf-orm/graph"
	"google.golang.org/protobuf/compiler/protogen"
)

type App struct {
	name string
}

func New(opts ...Option) (*App, error) {
	a := &App{}
	for _, opt := range opts {
		opt(a)
	}
	if a.name == "" {
		a.name = "store.g.go"
	}

	return a, nil
}

func (a *App) Run(ctx context.Context, p *protogen.Plugin, g *graph.Graph) error {
	gf, f := a.newGeneratedFile(p, g)
	if gf == nil {
		// No entity found.
		return nil
	}

	vs := make([]graph.Entity, 0, len(g.Entities))
	for _, f := range p.Files {
		for _, m := range f.Messages {
			v, ok := g.Entities[m.Desc.FullName()]
			if !ok {
				continue
			}

			vs = append(vs, v)
		}
	}

	w := &Work{
		GeneratedFile: gf,

		Entities: vs,
		Package:  f.GoImportPath,
	}

	w.xServerInterface()
	w.xUnimplementedServerStruct()
	w.xStaticServerStruct()
	w.xClient()

	return nil
}

func (a *App) newGeneratedFile(p *protogen.Plugin, g *graph.Graph) (*protogen.GeneratedFile, *protogen.File) {
	var f *protogen.File
L:
	for _, f_ := range p.Files {
		for _, m := range f_.Messages {
			if _, ok := g.Entities[m.Desc.FullName()]; !ok {
				continue
			}

			f = f_
			break L
		}
	}
	if f == nil {
		return nil, nil
	}

	dir, _ := filepath.Split(f.GeneratedFilenamePrefix)
	path := filepath.Join(dir, a.name)

	gf := p.NewGeneratedFile(path, f.GoImportPath)
	gf.P(`// Code generated by protoc-gen-orm-go. DO NOT EDIT.`)
	gf.P("")
	gf.P("package " + f.GoPackageName)
	gf.P("")

	return gf, f
}
